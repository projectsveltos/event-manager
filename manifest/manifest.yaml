apiVersion: v1
kind: Namespace
metadata:
  name: projectsveltos
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  name: eventbasedaddons.lib.projectsveltos.io
spec:
  group: lib.projectsveltos.io
  names:
    kind: EventBasedAddOn
    listKind: EventBasedAddOnList
    plural: eventbasedaddons
    singular: eventbasedaddon
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: EventBasedAddOn is the Schema for the eventbasedaddons API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: EventBasedAddOnSpec defines the desired state of EventBasedAddOn
            properties:
              destinationClusterSelector:
                description: DestinationClusterSelector identifies the cluster where
                  add-ons will be deployed. By default, this is nil and add-ons will
                  be deployed in the very same cluster the event happened. If DestinationClusterSelector
                  is set though, when an event happens in any of the cluster identified
                  by SourceClusterSelector, add-ons will be deployed in each of the
                  cluster indentified by DestinationClusterSelector.
                type: string
              eventSourceName:
                description: EventSourceName is the name of the referenced EventSource.
                  Resources contained in the referenced ConfigMaps/Secrets and HelmCharts
                  will be customized using information from resources matching the
                  EventSource in the managed cluster.
                type: string
              helmCharts:
                description: Helm charts to be deployed in the matching clusters based
                  on EventSource.
                items:
                  properties:
                    chartName:
                      description: ChartName is the chart name
                      minLength: 1
                      type: string
                    chartVersion:
                      description: ChartVersion is the chart version
                      minLength: 1
                      type: string
                    helmChartAction:
                      default: Install
                      description: HelmChartAction is the action that will be taken
                        on the helm chart
                      enum:
                      - Install
                      - Uninstall
                      type: string
                    releaseName:
                      description: ReleaseName is the chart release
                      minLength: 1
                      type: string
                    releaseNamespace:
                      description: ReleaseNamespace is the namespace release will
                        be installed
                      minLength: 1
                      type: string
                    repositoryName:
                      description: RepositoryName is the name helm chart repository
                      minLength: 1
                      type: string
                    repositoryURL:
                      description: RepositoryURL is the URL helm chart repository
                      minLength: 1
                      type: string
                    values:
                      description: 'Values holds the values for this Helm release.
                        Go templating with the values from the referenced CAPI Cluster.
                        Currently following can be referenced: - Cluster => CAPI Cluster
                        for instance - KubeadmControlPlane => the CAPI Cluster controlPlaneRef
                        - InfrastructureProvider => the CAPI cluster infrastructure
                        provider - SecretRef => store any confindetial information
                        in a Secret, set SecretRef then reference it'
                      type: string
                  required:
                  - chartName
                  - chartVersion
                  - releaseName
                  - releaseNamespace
                  - repositoryName
                  - repositoryURL
                  type: object
                type: array
              kustomizationRefs:
                description: Kustomization refs
                items:
                  properties:
                    deploymentType:
                      default: Remote
                      description: DeploymentType indicates whether resources need
                        to be deployed into the management cluster (local) or the
                        managed cluster (remote)
                      enum:
                      - Local
                      - Remote
                      type: string
                    kind:
                      description: 'Kind of the resource. Supported kinds are: - flux
                        GitRepository;OCIRepository;Bucket - ConfigMap/Secret'
                      enum:
                      - GitRepository
                      - OCIRepository
                      - Bucket
                      - ConfigMap
                      - Secret
                      type: string
                    name:
                      description: Name of the referenced resource.
                      minLength: 1
                      type: string
                    namespace:
                      description: Namespace of the referenced resource. Namespace
                        can be left empty. In such a case, namespace will be implicit
                        set to cluster's namespace.
                      type: string
                    path:
                      description: Path to the directory containing the kustomization.yaml
                        file, or the set of plain YAMLs a kustomization.yaml should
                        be generated for. Defaults to 'None', which translates to
                        the root path of the SourceRef.
                      type: string
                    targetNamespace:
                      description: TargetNamespace sets or overrides the namespace
                        in the kustomization.yaml file.
                      maxLength: 63
                      minLength: 1
                      type: string
                  required:
                  - kind
                  - name
                  - namespace
                  type: object
                type: array
              maxUpdate:
                anyOf:
                - type: integer
                - type: string
                description: 'The maximum number of clusters that can be updated concurrently.
                  Value can be an absolute number (ex: 5) or a percentage of desired
                  pods (ex: 10%). Defaults to 100%. Example: when this is set to 30%,
                  when list of add-ons/applications in ClusterProfile changes, only
                  30% of matching clusters will be updated in parallel. Only when
                  updates in those cluster succeed, other matching clusters are updated.'
                pattern: ^((100|[0-9]{1,2})%|[0-9]+)$
                x-kubernetes-int-or-string: true
              oneForEvent:
                description: Multiple resources in a managed cluster can be a match
                  for referenced EventSource. OneForEvent indicates whether a ClusterProfile
                  for all resource (OneForEvent = false) or one per resource (OneForEvent
                  = true) needs to be creted.
                type: boolean
              policyRefs:
                description: PolicyRefs references all the ConfigMaps/Secrets containing
                  kubernetes resources that need to be deployed in the matching clusters
                  based on EventSource.
                items:
                  properties:
                    deploymentType:
                      default: Remote
                      description: DeploymentType indicates whether resources need
                        to be deployed into the management cluster (local) or the
                        managed cluster (remote)
                      enum:
                      - Local
                      - Remote
                      type: string
                    kind:
                      description: 'Kind of the resource. Supported kinds are: Secrets
                        and ConfigMaps.'
                      enum:
                      - Secret
                      - ConfigMap
                      type: string
                    name:
                      description: Name of the referenced resource.
                      minLength: 1
                      type: string
                    namespace:
                      description: Namespace of the referenced resource. Namespace
                        can be left empty. In such a case, namespace will be implicit
                        set to cluster's namespace.
                      type: string
                  required:
                  - kind
                  - name
                  type: object
                type: array
              sourceClusterSelector:
                description: SourceClusterSelector identifies clusters to associate
                  to. This represents the set of clusters where Sveltos will watch
                  for events defined by referenced EventSource
                type: string
              stopMatchingBehavior:
                default: WithdrawPolicies
                description: StopMatchingBehavior indicates what behavior should be
                  when a Cluster stop matching the ClusterProfile. By default all
                  deployed Helm charts and Kubernetes resources will be withdrawn
                  from Cluster. Setting StopMatchingBehavior to LeavePolicies will
                  instead leave ClusterProfile deployed policies in the Cluster.
                type: string
              syncMode:
                default: Continuous
                description: SyncMode specifies how features are synced in a matching
                  workload cluster. - OneTime means, first time a workload cluster
                  matches the ClusterProfile, features will be deployed in such cluster.
                  Any subsequent feature configuration change won't be applied into
                  the matching workload clusters; - Continuous means first time a
                  workload cluster matches the ClusterProfile, features will be deployed
                  in such a cluster. Any subsequent feature configuration change will
                  be applied into the matching workload clusters. - DryRun means no
                  change will be propagated to any matching cluster. A report instead
                  will be generated summarizing what would happen in any matching
                  cluster because of the changes made to ClusterProfile while in DryRun
                  mode.
                enum:
                - OneTime
                - Continuous
                - ContinuousWithDriftDetection
                - DryRun
                type: string
              validateHealths:
                description: ValidateHealths is a slice of Lua functions to run against
                  the managed cluster to validate the state of those add-ons/applications
                  is healthy
                items:
                  properties:
                    featureID:
                      description: 'FeatureID is an indentifier of the feature (Helm/Kustomize/Resources)
                        This field indicates when to run this check. For instance:
                        - if set to Helm this check will be run after all helm charts
                        specified in the ClusterProfile are deployed. - if set to
                        Resources this check will be run after the content of all
                        the ConfigMaps/Secrets referenced by ClusterProfile in the
                        PolicyRef sections is deployed'
                      enum:
                      - Resources
                      - Helm
                      - Kustomize
                      type: string
                    group:
                      description: Group of the resource to fetch in the managed Cluster.
                      type: string
                    kind:
                      description: Kind of the resource to fetch in the managed Cluster.
                      minLength: 1
                      type: string
                    labelFilters:
                      description: LabelFilters allows to filter resources based on
                        current labels.
                      items:
                        properties:
                          key:
                            description: Key is the label key
                            type: string
                          operation:
                            description: Operation is the comparison operation
                            enum:
                            - Equal
                            - Different
                            type: string
                          value:
                            description: Value is the label value
                            type: string
                        required:
                        - key
                        - operation
                        - value
                        type: object
                      type: array
                    name:
                      description: Name is the name of this check
                      type: string
                    namespace:
                      description: Namespace of the resource to fetch in the managed
                        Cluster. Empty for resources scoped at cluster level.
                      type: string
                    script:
                      description: Script is a text containing a lua script. Must
                        return struct with field "health" representing whether object
                        is a match (true or false)
                      type: string
                    version:
                      description: Version of the resource to fetch in the managed
                        Cluster.
                      type: string
                  required:
                  - featureID
                  - group
                  - kind
                  - name
                  - version
                  type: object
                type: array
            required:
            - eventSourceName
            - sourceClusterSelector
            type: object
          status:
            description: EventBasedAddOnStatus defines the observed state of EventBasedAddOn
            properties:
              clusterInfo:
                description: ClusterInfo represent the deployment status in each managed
                  cluster.
                items:
                  properties:
                    cluster:
                      description: Cluster references the Cluster
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    failureMessage:
                      description: FailureMessage provides more information about
                        the error.
                      type: string
                    hash:
                      description: Hash represents the hash of the Classifier currently
                        deployed in the Cluster
                      format: byte
                      type: string
                    status:
                      description: Status represents the state of the feature in the
                        workload cluster
                      enum:
                      - Provisioning
                      - Provisioned
                      - Failed
                      - Removing
                      - Removed
                      type: string
                  required:
                  - cluster
                  - hash
                  type: object
                type: array
              destinationMatchingClusterRefs:
                description: DestinationMatchingClusterRefs reference all the cluster-api
                  Cluster currently matching ClusterProfile DestinationClusterSelector
                items:
                  description: "ObjectReference contains enough information to let
                    you inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its usage
                    when embedded in APIs. 1. Ignored fields.  It includes many fields
                    which are not generally honored.  For instance, ResourceVersion
                    and FieldPath are both very rarely valid in actual usage. 2. Invalid
                    usage help.  It is impossible to add specific help for individual
                    usage.  In most embedded usages, there are particular restrictions
                    like, \"must refer only to types A and B\" or \"UID not honored\"
                    or \"name must be restricted\". Those cannot be well described
                    when embedded. 3. Inconsistent validation.  Because the usages
                    are different, the validation rules are different by usage, which
                    makes it hard for users to predict what will happen. 4. The fields
                    are both imprecise and overly precise.  Kind is not a precise
                    mapping to a URL. This can produce ambiguity during interpretation
                    and require a REST mapping.  In most cases, the dependency is
                    on the group,resource tuple and the version of the actual struct
                    is irrelevant. 5. We cannot easily change it.  Because this type
                    is embedded in many locations, updates to this type will affect
                    numerous schemas.  Don't make new APIs embed an underspecified
                    API type they do not control. \n Instead of using this type, create
                    a locally provided and used type that is well-focused on your
                    reference. For example, ServiceReferences for admission registration:
                    https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                    ."
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                type: array
              matchingClusters:
                description: MatchingClusterRefs reference all the cluster-api Cluster
                  currently matching ClusterProfile SourceClusterSelector
                items:
                  description: "ObjectReference contains enough information to let
                    you inspect or modify the referred object. --- New uses of this
                    type are discouraged because of difficulty describing its usage
                    when embedded in APIs. 1. Ignored fields.  It includes many fields
                    which are not generally honored.  For instance, ResourceVersion
                    and FieldPath are both very rarely valid in actual usage. 2. Invalid
                    usage help.  It is impossible to add specific help for individual
                    usage.  In most embedded usages, there are particular restrictions
                    like, \"must refer only to types A and B\" or \"UID not honored\"
                    or \"name must be restricted\". Those cannot be well described
                    when embedded. 3. Inconsistent validation.  Because the usages
                    are different, the validation rules are different by usage, which
                    makes it hard for users to predict what will happen. 4. The fields
                    are both imprecise and overly precise.  Kind is not a precise
                    mapping to a URL. This can produce ambiguity during interpretation
                    and require a REST mapping.  In most cases, the dependency is
                    on the group,resource tuple and the version of the actual struct
                    is irrelevant. 5. We cannot easily change it.  Because this type
                    is embedded in many locations, updates to this type will affect
                    numerous schemas.  Don't make new APIs embed an underspecified
                    API type they do not control. \n Instead of using this type, create
                    a locally provided and used type that is well-focused on your
                    reference. For example, ServiceReferences for admission registration:
                    https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                    ."
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                        is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: event-manager
  namespace: projectsveltos
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: event-leader-election-role
  namespace: projectsveltos
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: event-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - clusters/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machines
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cluster.x-k8s.io
  resources:
  - machines/status
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - config.projectsveltos.io
  resources:
  - clusterprofiles
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - lib.projectsveltos.io
  resources:
  - debuggingconfigurations
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - lib.projectsveltos.io
  resources:
  - eventbasedaddons
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - lib.projectsveltos.io
  resources:
  - eventbasedaddons/finalizers
  verbs:
  - update
- apiGroups:
  - lib.projectsveltos.io
  resources:
  - eventbasedaddons/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - lib.projectsveltos.io
  resources:
  - eventreports
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- apiGroups:
  - lib.projectsveltos.io
  resources:
  - eventsources
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - lib.projectsveltos.io
  resources:
  - sveltosclusters
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - lib.projectsveltos.io
  resources:
  - sveltosclusters/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: event-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: event-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: event-leader-election-rolebinding
  namespace: projectsveltos
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: event-leader-election-role
subjects:
- kind: ServiceAccount
  name: event-manager
  namespace: projectsveltos
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: event-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: event-manager-role
subjects:
- kind: ServiceAccount
  name: event-manager
  namespace: projectsveltos
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: event-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: event-proxy-role
subjects:
- kind: ServiceAccount
  name: event-manager
  namespace: projectsveltos
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: bfaea346.projectsveltos.io
    # leaderElectionReleaseOnCancel defines if the leader should step down volume
    # when the Manager ends. This requires the binary to immediately end when the
    # Manager is stopped, otherwise, this setting is unsafe. Setting this significantly
    # speeds up voluntary leader transitions as the new leader don't have to wait
    # LeaseDuration time first.
    # In the default scaffold provided, the program ends immediately after
    # the manager stops, so would be fine to enable this option. However,
    # if you are doing or is intended to do any operation such as perform cleanups
    # after the manager stops then its usage might be unsafe.
    # leaderElectionReleaseOnCancel: true
kind: ConfigMap
metadata:
  name: event-manager-config
  namespace: projectsveltos
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: event-manager
  name: event-manager-metrics-service
  namespace: projectsveltos
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: event-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: event-manager
  name: event-manager
  namespace: projectsveltos
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: event-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: event-manager
    spec:
      containers:
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        - --v=5
        command:
        - /manager
        image: projectsveltos/event-manager-amd64:v0.18.1
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.12.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
      serviceAccountName: event-manager
      terminationGracePeriodSeconds: 10
